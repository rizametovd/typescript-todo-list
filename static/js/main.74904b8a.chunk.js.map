{"version":3,"sources":["components/App/styles.module.css","components/TodoList/styles.module.css","types/types.ts","hooks/useTypedSelector.ts","store/actionCreators.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/Form/Form.tsx","store/inputValidationReducer.ts","store/tasksReducer.ts","store/index.ts","components/App/App.tsx","index.tsx","components/Form/styles.module.css","components/TodoItem/styles.module.css"],"names":["module","exports","TaskActionTypes","ValidationTypes","useTypedSelector","useSelector","checkValidity","payload","type","IS_VALID","TodoItem","id","task","complete","tasks","state","dispatch","useDispatch","deleteTask","removeTask","filter","REMOVE_TASK","toggleTask","taskStatus","map","TASK_IS_CCOMPLETE","className","styles","item","itemLabel","checked","checkbox","onChange","text","deleteButton","onClick","TodoList","list","Form","useState","value","setValue","validation","validationErrors","name","onSubmit","e","preventDefault","ADD_TASK","form","noValidate","target","length","SET_ERROR","REMOVE_ERROR","autoComplete","input","minLength","required","button","isValid","buttonActive","buttonDisabled","disabled","error","initialState","rootReducer","combineReducers","action","uuid","store","createStore","App","page","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74904b8a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"styles_page__3TBVE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"styles_list__22-Mm\"};","export interface ITodo {\r\n  id: string;\r\n  task: string;\r\n  complete: boolean;\r\n}\r\n\r\nexport enum TaskActionTypes {\r\n  ADD_TASK = 'ADD_TASK',\r\n  REMOVE_TASK = 'REMOVE_TASK',\r\n  TASK_IS_CCOMPLETE = 'TASK_IS_CCOMPLETE',\r\n}\r\n\r\nexport enum ValidationTypes {\r\n  SET_ERROR = 'SET_ERROR',\r\n  REMOVE_ERROR = 'REMOVE_ERROR',\r\n  IS_VALID = 'IS_VALID',\r\n}\r\n\r\nexport interface IAddTaskAction {\r\n  type: TaskActionTypes.ADD_TASK;\r\n  payload: string;\r\n}\r\n\r\nexport interface IRemoveTaskAction {\r\n  type: TaskActionTypes.REMOVE_TASK;\r\n  payload: ITodo[];\r\n}\r\n\r\nexport interface IToogleTaskStatus {\r\n  type: TaskActionTypes.TASK_IS_CCOMPLETE;\r\n  payload: ITodo[];\r\n}\r\n\r\nexport interface IErrors {\r\n  input?: string;\r\n  isValid: boolean;\r\n}\r\n\r\nexport interface IIsValidAction {\r\n  type: ValidationTypes.IS_VALID;\r\n  payload: IErrors;\r\n}\r\n\r\nexport interface ISetInputErrorsAction {\r\n  type: ValidationTypes.SET_ERROR;\r\n}\r\n\r\nexport interface IRemoveInputErrorsAction {\r\n  type: ValidationTypes.REMOVE_ERROR;\r\n}\r\n\r\nexport type ErrorAction = IIsValidAction | ISetInputErrorsAction | IRemoveInputErrorsAction;\r\nexport type Action = IAddTaskAction | IRemoveTaskAction | IToogleTaskStatus;\r\n","import { TypedUseSelectorHook, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../store\";\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;","import {\r\n  IAddTaskAction,\r\n  IRemoveInputErrorsAction,\r\n  IRemoveTaskAction,\r\n  ISetInputErrorsAction,\r\n  ITodo,\r\n  IToogleTaskStatus,\r\n  TaskActionTypes,\r\n  ValidationTypes,\r\n} from '../types/types';\r\n\r\nexport const addTaskAction = (payload: string): IAddTaskAction => {\r\n  return {\r\n    type: TaskActionTypes.ADD_TASK,\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const removeTaskAction = (payload: ITodo[]): IRemoveTaskAction => {\r\n  return {\r\n    type: TaskActionTypes.REMOVE_TASK,\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const toggleTaskStatus = (payload: ITodo[]): IToogleTaskStatus => {\r\n  return {\r\n    type: TaskActionTypes.TASK_IS_CCOMPLETE,\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const setErrors = (): ISetInputErrorsAction => {\r\n  return {\r\n    type: ValidationTypes.SET_ERROR,\r\n  };\r\n};\r\n\r\nexport const removeError = (): IRemoveInputErrorsAction => {\r\n  return {\r\n    type: ValidationTypes.REMOVE_ERROR,\r\n  };\r\n};\r\n\r\nexport const checkValidity = (payload: boolean) => {\r\n  return {\r\n    type: ValidationTypes.IS_VALID,\r\n    payload,\r\n  };\r\n};\r\n","import styles from './styles.module.css';\r\nimport { ITodo } from '../../types/types';\r\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\r\nimport { useDispatch } from 'react-redux';\r\nimport { removeTaskAction, toggleTaskStatus } from '../../store/actionCreators';\r\n\r\nconst TodoItem: React.FC<ITodo> = ({ id, task, complete }) => {\r\n  const tasks: ITodo[] = useTypedSelector((state) => state.tasks);\r\n  const dispatch = useDispatch();\r\n\r\n  const deleteTask = (id: string): void => {\r\n    const removeTask = tasks.filter((task) => task.id !== id);\r\n    dispatch(removeTaskAction(removeTask));\r\n  };\r\n\r\n  const toggleTask = (id: string): void => {\r\n    const taskStatus = tasks.map((task) =>\r\n      task.id !== id ? task : { ...task, complete: !task.complete }\r\n    );\r\n    dispatch(toggleTaskStatus(taskStatus));\r\n  };\r\n\r\n  return (\r\n    <div className={styles.item}>\r\n      <label className={styles.itemLabel}>\r\n      <input\r\n        type='checkbox'\r\n        checked={complete}\r\n        className={styles.checkbox}\r\n        onChange={() => toggleTask(id)}\r\n      />\r\n      <p className={styles.text}>{task}</p>\r\n      </label>\r\n      \r\n      <button className={styles.deleteButton} onClick={() => deleteTask(id)} type='button' />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { TodoItem };\r\n","import styles from './styles.module.css';\r\nimport { ITodo } from '../../types/types';\r\nimport { TodoItem } from '../TodoItem/TodoItem';\r\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\r\n\r\nconst TodoList: React.FC = () => {\r\n  const tasks: ITodo[] = useTypedSelector((state) => state.tasks);\r\n\r\n  return (\r\n    <ul className={styles.list}>\r\n      {tasks.map((task: ITodo) => (\r\n        <li key={task.id}>\r\n          <TodoItem key={task.id} {...task} />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport { TodoList };\r\n","import styles from './styles.module.css';\r\nimport { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addTaskAction, checkValidity, removeError, setErrors } from '../../store/actionCreators';\r\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\r\nimport { IErrors } from '../../types/types';\r\n\r\nconst Form: React.FC = () => {\r\n  const [value, setValue] = useState<string>('');\r\n  const validation: IErrors = useTypedSelector((state) => state.validationErrors);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange: React.ChangeEventHandler<HTMLInputElement> = (e): void => {\r\n    const name = e.target.name;\r\n\r\n    if (name === 'input') {\r\n      e.target.value.length < 2 ? dispatch(setErrors()) : dispatch(removeError());\r\n    }\r\n    setValue(e.target.value);\r\n    dispatch(checkValidity(e.target.checkValidity()));\r\n  };\r\n\r\n  const handleSubmit: React.FormEventHandler<HTMLFormElement> = (e): void => {\r\n    e.preventDefault();\r\n    dispatch(addTaskAction(value));\r\n    setValue('');\r\n    dispatch(checkValidity(false));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form name='form' onSubmit={handleSubmit} className={styles.form} noValidate>\r\n        <input\r\n          value={value}\r\n          onChange={handleChange}\r\n          autoComplete='off'\r\n          className={styles.input}\r\n          minLength={2}\r\n          required\r\n          name='input'\r\n        />\r\n        <button\r\n          type='submit'\r\n          className={`${styles.button} ${\r\n            validation.isValid ? styles.buttonActive : styles.buttonDisabled\r\n          }`}\r\n          disabled={!validation.isValid}\r\n        >\r\n          Добавить\r\n        </button>\r\n      </form>\r\n      <span className={styles.error}>{validation.input || ''}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { Form };\r\n","import { ErrorAction, IErrors, ValidationTypes } from '../types/types';\r\n\r\nconst initialState: IErrors = {\r\n  isValid: false,\r\n};\r\n\r\nexport const inputValidationReducer = (state = initialState, action: ErrorAction) => {\r\n  switch (action.type) {\r\n    case ValidationTypes.SET_ERROR: {\r\n      return { ...state, input: 'Минимальная длина 2 символа' };\r\n    }\r\n    case ValidationTypes.REMOVE_ERROR: {\r\n      return { ...state, input: '' };\r\n    }\r\n    case ValidationTypes.IS_VALID: {\r\n      return { ...state, isValid: action.payload };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { v4 as uuid } from 'uuid';\r\nimport { Action, ITodo, TaskActionTypes } from '../types/types';\r\n\r\nconst initialState: ITodo[] = [];\r\n\r\nexport const tasksReducer = (state = initialState, action: Action) => {\r\n  switch (action.type) {\r\n    case TaskActionTypes.ADD_TASK:\r\n      return [...state, { id: uuid(), task: action.payload, complete: false }];\r\n    case TaskActionTypes.REMOVE_TASK:\r\n      return [...action.payload];\r\n    case TaskActionTypes.TASK_IS_CCOMPLETE:\r\n      return [...action.payload];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers, createStore } from 'redux';\r\nimport { inputValidationReducer } from './inputValidationReducer';\r\nimport { tasksReducer } from './tasksReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  validationErrors: inputValidationReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\nexport const store = createStore(rootReducer);\r\n","import '../../vendor/normalize.css';\r\nimport styles from './styles.module.css';\r\nimport { TodoList } from '../TodoList/TodoList';\r\nimport { Form } from '../Form/Form';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from '../../store';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className={styles.page}>\r\n      <Provider store={store}>\r\n        <Form />\r\n        <TodoList />\r\n      </Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { App };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"styles_form__38Sxz\",\"input\":\"styles_input__H8Ke9\",\"button\":\"styles_button__VhX84\",\"buttonActive\":\"styles_buttonActive__2lI1R\",\"buttonDisabled\":\"styles_buttonDisabled__P6w2N\",\"error\":\"styles_error__2YSKE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"styles_item__2LIIN\",\"itemLabel\":\"styles_itemLabel__tins5\",\"checkbox\":\"styles_checkbox__3eaH0\",\"text\":\"styles_text__2rdAM\",\"deleteButton\":\"styles_deleteButton__2MbwR\"};"],"sourceRoot":""}